import os,sys,re,string

def checkimports():
	try:
		import pefile,peutils
		import jsbeautifier.unpackers.packer as packer
	except(ImportError as e):
		print "I/O error({0}): {1}".format(e.errno, e.strerror)
		sys.exit(0)
		
# Say Hello
def clrscr():
	if sys.platform == 'linux-i386' or sys.platform == 'linux2' or sys.platform == 'darwin':
		SysCls = 'clear'
	else sys.platform == 'win32' or sys.platform == 'dos' or sys.platform[0:5] == 'ms-dos':
		SysCls = 'cls'
	
	os.system(SysCls)

INTERESTING_CALLS = ["CreateMutex", "CopyFile", "CreateFile.*WRITE", "NtasdfCreateFile", "call shell32", "advapi32.RegOpenKey",
	"KERNEL32.CreateProcess", "shdocvw", "gethostbyname", "ws2_32.bind", "ws2_32.listen", "ws2_32.htons", 
	"advapi32.RegCreate", "advapi32.RegSet", "http://","Socket",
	"^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])",
	"OutputDebugString","GetEnvironmentStrings","LoadLibraryA","WSASocketA", "GetProcAddress",
	"FindWindow","CreateProcess","DuplicateTokenEx","ImpersonateNamedPipeClient","RevertToSelf","signal",
	"IsDebuggerPresent"
	]
INTERESTING_CALLS_DLLS=["KERNEL32.DLL","advapi32.dll","comctl32.dll","gdi32.dll","ole32.dll","oleaut32.dll","user32.dll","wsock32.dll","ntdll.dll"]
INTERESTING_SYS_CALLS=["ping.exe","telnet.exe"]
REGISTRY_CALLS =["HKEY_CURRENT_USER","HKEY_CLASSES_ROOT","HKEY_LOCAL_MACHINE","autorum.inf"]
ONLINE_WORK =["(?:\d{1,3}\.){3}\d{1,3}","(http)?(ww.)?","IRC","Joined channel","Port","BOT","Login","flood","ddos","NICK","ECHO","PRIVMSG","ADMIN","AWAY","CONNECT","KICK","LIST","MODE","MOTD","PING","PONG","QUIT","SERVLIST","SERVICE","NAMES","JOIN","INVITE","INFO","TRACE","USERHOST","WHO","WHOIS","VERSION"]
FILE_TYPE_HEX = ['52 49 46 46','2E 73 6E 64','42 4D F8 A9','42 4D 62 25','42 4D 76 03','4D 53 43 46','4D 5A 90 00','D0 CF 11 E0','4D 5A 50 00' ,'4D 5A 90 00' ,'46 4C 56 01' ,'47 49 46 38 39 61','47 49 46 38 37 61','1F 8B 08 08','00 00 01 00','FF D8 FF E1','FF D8 FF E0','FF D8 FF FE','7F 45 4C 46','89 50 4E 47','D0 CF 11 E0','49 44 33 2E','49 44 33 03','4F 46 54 32','D0 CF 11 E0','25 50 44 46','52 61 72 21','43 57 53 06','1F 8B 08 00','1F 9D 90 70','D0 CF 11 E0','30 26 B2 75','50 4B 03 04']
FILE_TYPE={'ani':'52 49 46 46','au ':'2E 73 6E 64' ,'bmp':'42 4D F8 A9' ,'bmp':'42 4D 62 25' ,'bmp':'42 4D 76 03' ,'cab':'4D 53 43 46' ,'dll':'4D 5A 90 00' ,'excel':'D0 CF 11 E0' ,'exe':'4D 5A 50 00' ,'exe':'4D 5A 90 00' ,'flv':'46 4C 56 01' ,'gif':'47 49 46 38 39 61' ,'gif':'47 49 46 38 37 61' ,'gz ':'1F 8B 08 08' ,'ico':'00 00 01 00','jpeg':'FF D8 FF E1','jpeg':'FF D8 FF E0','jpeg':'FF D8 FF FE','lbin':'7F 45 4C 46','png':'89 50 4E 47','msi':'D0 CF 11 E0','mp3':'49 44 33 2E','mp3':'49 44 33 03','oft':'4F 46 54 32','ppt':'D0 CF 11 E0','pdf':'25 50 44 46','rar':'52 61 72 21','sfw':'43 57 53 06','tar':'1F 8B 08 00','tgz':'1F 9D 90 70','ord':'D0 CF 11 E0','wmv':'30 26 B2 75','zip' :'50 4B 03 04'}

def checkargs():
	if (len (sys.argv) <3):
		print "\n Usage: ./maldetect.py <filetype> <filename> \n"
		print "\t\t Example: ./analyse_malware.py -b malware.exe \n"
		print "\tFor Help: ./analyse_malware.py --help\n"
		sys.exit(0)
	for arg in sys.argv:
		if arg=='--help':
			print "\n Usage: ./maldetect.py <filetype> <filename> \n"
			print "Options: \n"
			print "-b	 specifies malware binary\n "
			print "-t	 specifies report in text format\n"
			print "Example: ./analyse_malware.py -b malware.exe \n"
				sys.exit(0)


def readfile():
	global malware=sys.argv[2]
	try:
		global hosts= open(malware,'r').readlines()
	except (IOError):
		print " \n\n[!]Unable to read file .Exiting.\n"
		sys.exit(0)

def getFileType():
	str="objdump -h "+malware+" | >header"
	os.system(str)
	headresult=open('header','r').readlines()
	for line in headresult:
		print line
	os.system("rm header")
	
def system_calls():
	performed=[]
	for line in hosts:
		for calls in INTERESTING_CALLS:
			if re.search(calls, line):
				if not calls in performed:
					print "[+] Found an Interesting call to: ",calls
					performed.append(calls)
	

def registry_analysis():
	for line in hosts:
		for calls in REGISTRY_CALLS:
			if re.search(calls, line):
				print "[+] Malware is Adding a Key at Hive: ",calls
				print line
				
def calls_to_dlls():
	if sys.platform == 'linux-i386' or sys.platform == 'linux2' or sys.platform == 'darwin':
		str="objdump -x "+malware+" | grep DLL >result"
		#print str
		print "\n Since Host OS is Linux. Peforming Deeper Analysis\n"
		details=os.system(str)
		dllresult=open('result','r').readlines()
		print "\n   [+] Dlls Loaded are:\n"
		for line in dllresult:
			print line
		os.system("rm result")
	else:
		for line in hosts:
			for calls in INTERESTING_CALLS_DLLS:
				if re.search(calls, line):
					print "\n[+] Loaded Dll: ",calls
					
def find_import_table():
	str="objdump -x "+malware+"  | grep \"import table\" >impresult"
	os.system(str)
	importresult=open('impresult','r').readlines()
	for line in importresult:
		print line
	os.system("rm impresult")

def start_address():
	str="objdump -x "+malware+"  | grep \"start address\" >startresult"
	os.system(str)
	stresult=open('startresult','r').readlines()
	for line in stresult:
		print line
	os.system("rm startresult")

def header_info():
	str="objdump -h "+malware+" >header"
	os.system(str)
	headresult=open('header','r').readlines()
	for line in headresult:
		print line
	os.system("rm header")

def generate_dump():
	str="objdump -s "+malware+" >ascii_dump"
	os.system(str)
	headresult=open('ascii_dump','r').readlines()
	for line in headresult:
		print line

def calls_to_syscommand():
	for line in hosts:
		for calls in INTERESTING_SYS_CALLS:
			if re.search(calls, line):
				print "\n[+] Call Made: ",calls
				print "\n\n[!] It Can be Part of DDOS Network.\n"
				
def online_activity():
	performed=[]
	for line in hosts:
		for calls in ONLINE_WORK:
			if re.search(calls, line):
				if not calls in performed:
					print "\n Online activity Indicator",calls
					performed.append(calls)

def getSignatureForPe(pe):
	try:
		signatures = peutils.SignatureDatabase(PE_SIGNATURE_PATH)
		return signatures.match_all(pe)
	except:
		print ""

def get_pe_signature():
	try:
		pe = pefile.PE(malware)
		signatureInfo = getSignatureForPe(pe)
		peInfo = pe.dump_info()
		print peInfo
	except:
		print "\n\n[!] Download PE Package from google code.\n"
		print "\n[!]Exiting.\n"


def generate_dump():
	filename="ascii_dump_"+malware+".txt"
	str="objdump -s "+malware+" > "+filename
	os.system(str)
	headresult=open(filename,'r').readlines()
	for line in headresult:
		print line
	print "\n Check "+filename+" for the ASCII dump output"
	raw_input("\n Press <Enter> to Exit.\n")
	sys.exit(0)



def checkPE():
	print "\n Analysing if PE file...\n"
	check = file(malware, "rb")
	buff = check.read(2)
	check.close()
	if buff == "MZ":
		print "\n[+] Valid PE file."
		print "\n[+] Malware File Size :" , (os.path.getsize(malware))/1000 ,"KB"
	else: 
		print "[!] Not a Valid PE File. Exiting.!\n"
		sys.exit(0)


def apps_start():
	clrscr()
	checkimports()
	checkargs()
	readfile()
	getfiletype()
	print "\n[!] Displaying Interesting System Calls Made.\n"
	system_calls()
	if sys.platform == 'linux-i386' or sys.platform == 'linux2' or sys.platform == 'darwin':
		print "\n[+] Displaying Address of Import Table\n"
		find_import_table()
		print "\n[+] Displaying the Start Address\n"
		start_address()
		print "\n[+] Displaying the Header Sections and File Format"
		header_info()
	print "\n[!] Displaying Registry Hives Edited.\n"
	registry_analysis()
	print "\n\n[!] Displaying Online Activity.\n"
	online_activity()
	print "\n\n[!] Displaying the Loaded DLLs.\n"
	calls_to_dlls()
	print "\n\n[!] Commands Inside the Malware.\n"
	calls_to_syscommand()
	print "\n\n[!] Displaying the Headers of the Malware.\n"
	get_pe_signature()

apps_start()
